variables:
  DOCKER_HOST: "tcp://docker:2375"
  # Instruct Docker not to start over TLS.
  DOCKER_TLS_CERTDIR: ""
  DOCKER_DRIVER: overlay2
  DIND_IMAGE: docker:27.5.1-dind

workflow:
  rules:
    - if: $CI_COMMIT_BRANCH

before_script:
  - set -u
  - date

after_script:
  - date

stages:
  - run_checks
  - publish


run_checks:
  image: python:3.13.2-alpine3.21
  stage: run_checks
  coverage: '/^TOTAL\s+\d+\s+\d+\s+(\d+%)$/'
  cache:
    key: $CI_COMMIT_REF_SLUG
    paths:
      - .venv/
  script:
    - apk add --no-cache make curl gcc musl-dev libffi-dev
    - make prepare
    - source .venv/bin/activate
    - make lint
    - make test


smoke_tests:
  image: $DIND_IMAGE
  stage: run_checks
  services:
    - name: $DIND_IMAGE
      # explicitly disable tls to avoid docker startup interruption
      command: ["--tls=false"]
      alias: docker
  variables:
    KUBECTL: v1.32.0
    KIND: v0.26.0
  tags:
    - dind
  script:
    - set -u
    - date

    # build image
    - VERSION=`grep '^version = "' pyproject.toml  | cut -d '"' -f 2`
    - CALLISTO_IMAGE=${CI_REGISTRY_IMAGE}:${VERSION}-${CI_PIPELINE_IID}
    - docker build -t $CALLISTO_IMAGE --build-arg ENVIRONMENT="prod" .
    - date

    # Download kind and kubectl
    - apk add --update-cache --upgrade curl jq make sed
    - curl https://github.com/kubernetes-sigs/kind/releases/download/${KIND}/kind-linux-amd64 -sLfSo /usr/local/bin/kind && chmod +x /usr/local/bin/kind
    - curl https://dl.k8s.io/release/${KUBECTL}/bin/linux/amd64/kubectl -sLfSo /usr/local/bin/kubectl && chmod +x /usr/local/bin/kubectl

    # Run kind cluster
    - kind create cluster --config=tests/smoke/kind-config.yaml
    - sed -i -e 's/0\.0\.0\.0/kubernetes/g' "${HOME}/.kube/config"
    - cat /etc/hosts | sed -e 's/\tdocker/\tdocker kubernetes/g' > /tmp/hosts && cat /tmp/hosts > /etc/hosts
    - date

    # Run callisto in kind
    - VERSION=`grep '^version = "' pyproject.toml  | cut -d '"' -f 2`
    - CALLISTO_IMAGE=${CI_REGISTRY_IMAGE}:${VERSION}-${CI_PIPELINE_IID}
    - kind load docker-image $CALLISTO_IMAGE
    - cat tests/smoke/callisto-kind.yaml | sed "s|{{CALLISTO_IMAGE}}|${CALLISTO_IMAGE}|g" | kubectl apply -f -
    - while [[ "$(kubectl get deployments callisto -o 'jsonpath={..status.readyReplicas}')" != "1" ]]; do echo "waiting for callisto..." && sleep 10; done
    - kubectl port-forward deployment/callisto 8080:80 > /dev/null &2>1 &
    - sleep 5  # waiting port-forward
    - kubectl get all
    - date

    # Run smoke tests
    - apk add -U python3 python3-dev libffi-dev build-base gcc
    - make prepare
    - . .venv/bin/activate
    - make test_smoke || (kubectl logs deployment/callisto --all-containers=true; false)
    - kubectl get all


publish_image:
  image: $DIND_IMAGE
  stage: publish
  services:
    - name: $DIND_IMAGE
      # explicitly disable tls to avoid docker startup interruption
      command: [ "--tls=false" ]
      alias: docker
  needs:
    - run_checks
    - smoke_tests
  tags:
    - dind
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: on_success
    - when: manual
  variables:
    ENVIRONMENT: 'prod'
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker build -t callisto --build-arg ENVIRONMENT="$ENVIRONMENT" .
    - VERSION=`grep '^version = "' pyproject.toml  | cut -d '"' -f 2`
    - docker tag callisto ${CI_REGISTRY_IMAGE}:${VERSION}-${CI_PIPELINE_IID}
    - |
      echo docker push ${CI_REGISTRY_IMAGE}:$VERSION-${CI_PIPELINE_IID}
      docker push ${CI_REGISTRY_IMAGE}:$VERSION-${CI_PIPELINE_IID}
